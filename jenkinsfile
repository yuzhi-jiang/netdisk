// ==================== ↓↓↓↓↓↓ docker ↓↓↓↓↓↓ ====================
// 镜像仓库地址
def DOCKER_REGISTRY_URL = "registry.cn-hangzhou.aliyuncs.com"
// 镜像仓库命名空间名称
def DOCKER_REGISTRY_NAMESPACE = "netdisk"
// 镜像拉取凭证 => jenkins全局凭证中配置
def DOCKER_REGISTRY_AUTH = "aliyun_docker_registry_auth"

// ==================== ↓↓↓↓↓↓ git ↓↓↓↓↓↓ ====================
// git凭证 => jenkins全局凭证中配置
def GIT_AUTH = "github_auth_with_token"

// ==================== ↓↓↓↓↓↓ project ↓↓↓↓↓↓ ====================
// 项目-git地址
def PROJECT_GIT_URL = "https://github.com/yuzhi-jiang/netdisk.git"
// 项目-公共模块名称
def PROJECT_SERVICE_COMMON_NAME = "netdisk-common"
def PROJECT_SERVICE_COMMON_FEIGN_NAME = "netdisk-feign"


// 项目-基础目录
def PROJECT_BASE_HOME = "/opt/netdisk"
// 项目-服务日志目录
def PROJECT_SERVICE_LOG_HOME = "${PROJECT_BASE_HOME}/logs"
// 项目-jar文件目录
def PROJECT_JAR_HOME = "${PROJECT_BASE_HOME}/target"
// 项目-docker部署的历史jar目录
def PROJECT_DOCKER_HISTORY_JAR_HOME = "${PROJECT_BASE_HOME}/docker-history-jar"



node {
    // jenkins工作空间
    def JENKINS_WORKSPACE = "${WORKSPACE}"
    // 取哪一块网卡值
    def ETH_VALUE = ""
    // 当前时间
    def CURRENT_TIME = ""
    // 获取选择的项目服务名称
    def project_service_name_select = "${PROJECT_SERVICE_NAME}".split(",")
    // 获取选择的服务器名称
    def publish_ssh_server_select = "${PUBLISH_SSH_SERVER}".split(",")
    // app镜像tag
    def app_docker_image_tag = ""


    stage('初始化准备') {
        echo '****************************** 初始化准备 ******************************'
        // 网卡值设置 [注:正常linux取eth0的内网ip，局域网取enp5s0的内网ip]
        ETH_VALUE = sh(script: "( [[ \"${JAVA_OPTS}\" = *'-Dspring.cloud.nacos.discovery.ip'* ]] && echo enp5s0 || echo eth0 )", returnStdout: true).trim()
        CURRENT_TIME = sh(script: "echo `date +\"%Y-%m-%d %H:%M:%S\"`", returnStdout: true).trim()
        script {
            app_docker_image_tag = GIT_BRANCH.replaceAll('origin/', '')
        }
        echo "当前工作空间：${JENKINS_WORKSPACE}"
        echo "使用分支：${GIT_BRANCH}"
        echo "使用docker镜像tag：${app_docker_image_tag}"
        echo "使用网卡：${ETH_VALUE}"
        echo "当前时间：${CURRENT_TIME}"
        sh "mkdir -p ${PROJECT_SERVICE_LOG_HOME}"
        sh "mkdir -p ${PROJECT_JAR_HOME}"
        sh "mkdir -p ${PROJECT_DOCKER_HISTORY_JAR_HOME}"
    }


    stage('拉取代码') {
        echo '****************************** 拉取代码 ******************************'
        checkout([$class: 'GitSCM', branches: [[name: "${GIT_BRANCH}"]], extensions: [], userRemoteConfigs: [[credentialsId: "${GIT_AUTH}", url: "${PROJECT_GIT_URL}"]]])
        sh "pwd"
    }


	stage('独自打包'){
	
		echo "独立打包测试"
		sh "mvn clean install"
	}

	

    stage('公共工程打包') {
        echo '****************************** 公共工程打包 ******************************'
        sh "mvn -f ${PROJECT_SERVICE_COMMON_NAME} clean install -Dmaven.test.skip=true"
		sh "mvn -f ${PROJECT_SERVICE_COMMON_FEIGN_NAME} clean install"

    }

    stage('微服务打包&删除旧容器和镜像&推送镜像&部署远程服务器') {
        echo '****************************** 微服务打包&删除旧容器和镜像&推送镜像&部署远程服务器 ******************************'

        for (int i = 0; i < project_service_name_select.length; i++) {

            // 当前待处理项目
            def current_app_name = project_service_name_select[i];
            def current_app_jar = "${current_app_name}.jar";
            // 父工程
            def current_app_parent = ""
            // 端口号
            def current_app_port = ""

            echo "当前操作项目: ${current_app_name}"

            script {
                switch (current_app_name) {
                    case "netdisk-front":
                        current_app_parent = "."
                        current_app_port = "8081"
                        break
                    case "cloud-hadoop":
                        current_app_parent = "."
                        current_app_port = "8082"
                        break
                    case "netdisk-gateway":
                        current_app_port = "9527"
                        current_app_parent = "."
                        break
                }
            }

            echo "当前操作项目： ${current_app_name} 端口：${current_app_port}  项目路径:${current_app_parent}/${current_app_name}"

// -Dmaven.test.skip=true 删除跳过测试
            sh "mvn -f ${current_app_parent}/${current_app_name} clean install"

            sh "cp ${current_app_parent}/${current_app_name}/target/${current_app_jar} ${JENKINS_WORKSPACE}/small-tools-api/docker"

            // app镜像
            def app_docker_image = "${DOCKER_REGISTRY_URL}/${DOCKER_REGISTRY_NAMESPACE}/${current_app_name}:${app_docker_image_tag}"

            echo "app镜像: ${app_docker_image}"

            // 删除旧容器
            sh "docker ps -a | grep ${current_app_name} | grep ${app_docker_image_tag} | awk '{print \$1}' | xargs -I docker stop {} | xargs -I docker rm {}"
            // 删除旧镜像
            sh "docker images | grep -E ${current_app_name} | grep ${app_docker_image_tag}| awk '{print \$3}' | uniq | xargs -I {} docker rmi --force {}"
            // 构建新镜像 -f:指定Dockerfile文件路径
            sh "cd ${JENKINS_WORKSPACE}/small-tools-api/docker && docker build -f Dockerfile --build-arg JAVA_OPTS=\"${JAVA_OPTS}\" --build-arg APP_NAME=${current_app_name} --build-arg APP_PORT=${current_app_port} -t ${app_docker_image} . --no-cache"


            echo '****************************** 推送镜像 ******************************'

            withCredentials([usernamePassword(credentialsId: "${DOCKER_REGISTRY_AUTH}", passwordVariable: 'password', usernameVariable: 'username')]) {
                // 登录镜像仓库
                sh "docker login -u ${username} -p ${password} ${DOCKER_REGISTRY_URL}"
                // 推送镜像
                sh "docker push ${app_docker_image}"
                sh "echo 镜像推送成功：${app_docker_image}"
            }

            // 操作完后移除docker目录下的jar文件，防止下次docker将多个jar一起构建导致镜像过大问题
            sh "mv -f ${JENKINS_WORKSPACE}/small-tools-api/docker/*.jar ${PROJECT_DOCKER_HISTORY_JAR_HOME}/"


            echo '****************************** 项目部署 ******************************'

            // 遍历所有服务器，分别部署
            for (int j = 0; j < publish_ssh_server_select.length; j++) {
                // 获取当前服务器名称
                def currentServerName = publish_ssh_server_select[j]
                echo '开始发布远程机器'
                sshPublisher(publishers: [sshPublisherDesc(configName: "${currentServerName}",
                        transfers: [sshTransfer(cleanRemote: false, excludes: '',
                                execCommand: """
                                    // 远程服务器下依次执行如下命令
                                    // 删除旧容器
                                    docker ps -a | grep ${current_app_name} | grep ${app_docker_image_tag} | awk '{print \$1}' | xargs -i docker stop {} | xargs -i docker rm {}
                                    // 删除旧镜像
                                    docker images | grep -E ${current_app_name} | grep ${app_docker_image_tag}| awk '{print \$3}' | uniq | xargs -I {} docker rmi --force {}
                                    // 拉取新镜像
                                    docker pull ${app_docker_image}
                                    // 创建日志文件
                                    mkdir -p ${PROJECT_SERVICE_LOG_HOME}
                                    cd ${PROJECT_SERVICE_LOG_HOME}
                                    touch ${current_app_name}.log
                                    // 运行容器
                                    echo "*** ${CURRENT_TIME} docker run -d -p ${current_app_port}:${current_app_port} -e JAVA_OPTS="${JAVA_OPTS} -Dspring.cloud.nacos.discovery.ip=`ifconfig ${ETH_VALUE} | grep inet | grep -v inet6 | awk '{print \$2}'`" -v ${PROJECT_SERVICE_LOG_HOME}/${current_app_name}.log:/home/${current_app_name}.log --name ${current_app_name}  ${app_docker_image}" >> ${PROJECT_SERVICE_LOG_HOME}/run.log
                                    docker run -d -p ${current_app_port}:${current_app_port} -e JAVA_OPTS="${JAVA_OPTS} -Dspring.cloud.nacos.discovery.ip=`ifconfig ${ETH_VALUE} | grep inet | grep -v inet6 | awk '{print \$2}'`" -v ${PROJECT_SERVICE_LOG_HOME}/${current_app_name}.log:/home/${current_app_name}.log --name ${current_app_name}  ${app_docker_image}
                                """,
                                execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,
                                patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '',
                                sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
            }

        }

    }

}